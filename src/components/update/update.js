import React, { useEffect, useState } from "react";
import "./update.css";
import axios from "axios";

const UpdatePassword = () => {
  const [search, setSearch] = useState("");          // √î t√¨m ki·∫øm
  const [accountExists, setAccountExists] = useState(false); // Ki·ªÉm tra t√†i kho·∫£n t·ªìn t·∫°i
  const [newPassword, setNewPassword] = useState(""); // M·∫≠t kh·∫©u m·ªõi
  const [successMessage, setSuccessMessage] = useState(""); // Th√¥ng b√°o th√†nh c√¥ng
  const [errorMessage, setErrorMessage] = useState("");     // Th√¥ng b√°o l·ªói
  const [deleteMessage, setDeleteMessage] = useState("");   // Th√¥ng b√°o khi x√≥a t√†i kho·∫£n

  // H√†m ki·ªÉm tra t√†i kho·∫£n c√≥ t·ªìn t·∫°i hay kh√¥ng
  const checkUserExistence = async () => {
    try {
      if (search.trim() === "") {
        setAccountExists(false);
        setSuccessMessage("");
        setErrorMessage("");
        return;
      }

      // G·ªçi API ƒë·ªÉ ki·ªÉm tra t√†i kho·∫£n
      const response = await axios.get(
        "http://ec2-13-250-208-51.ap-southeast-1.compute.amazonaws.com:8080/api/v1/identity/user",
        {
          params: {
            username: search
          }
        }
      );

      console.log("Full API Response:", response);

      const responseData = response.data;

      // Ki·ªÉm tra n·∫øu API tr·∫£ v·ªÅ th√†nh c√¥ng v√† c√≥ d·ªØ li·ªáu
      if (response.status === 200 && responseData.data) {
        setAccountExists(true);
        setSuccessMessage("");
        setErrorMessage("");
      } else {
        setAccountExists(false);
        setSuccessMessage("");
        setErrorMessage("T√†i kho·∫£n kh√¥ng t·ªìn t·∫°i.");
      }
    } catch (error) {
      console.error("L·ªói khi ki·ªÉm tra t√†i kho·∫£n:", error);
      setAccountExists(false);
      setSuccessMessage("");
      setErrorMessage("L·ªói khi ki·ªÉm tra t√†i kho·∫£n.");
    }
  };

  // H√†m c·∫≠p nh·∫≠t m·∫≠t kh·∫©u
  const handleUpdatePassword = async () => {
    if (!accountExists || !newPassword) return;

    try {
      // G·ªçi PUT API ƒë·ªÉ c·∫≠p nh·∫≠t m·∫≠t kh·∫©u
      const response = await axios.put(
        "http://ec2-13-250-208-51.ap-southeast-1.compute.amazonaws.com:8080/api/v1/identity/user",
        {
          username: search,
          password: newPassword
        }
      );

      console.log("Update Password Response:", response);

      // Ki·ªÉm tra n·∫øu c·∫≠p nh·∫≠t th√†nh c√¥ng
      if (response.status === 200) {
        setSuccessMessage(`M·∫≠t kh·∫©u c·ªßa ${search} ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t.`);
        setErrorMessage("");
        setNewPassword(""); // Reset √¥ nh·∫≠p m·∫≠t kh·∫©u
      } else {
        setSuccessMessage("");
        setErrorMessage("L·ªói khi c·∫≠p nh·∫≠t m·∫≠t kh·∫©u.");
      }
    } catch (error) {
      console.error("L·ªói khi c·∫≠p nh·∫≠t m·∫≠t kh·∫©u:", error);
      setSuccessMessage("");
      setErrorMessage("L·ªói khi c·∫≠p nh·∫≠t m·∫≠t kh·∫©u.");
    }
  };

  // H√†m x√≥a t√†i kho·∫£n
  const handleDeleteAccount = async () => {
    if (!accountExists) return;

    try {
      // G·ªçi DELETE API ƒë·ªÉ x√≥a t√†i kho·∫£n
      const response = await axios.delete(`http://ec2-13-250-208-51.ap-southeast-1.compute.amazonaws.com:8080/api/v1/identity/user/${search}`);

      console.log("Delete Account Response:", response);

      // Ki·ªÉm tra n·∫øu x√≥a th√†nh c√¥ng
      if (response.status === 200) {
        setDeleteMessage(`T√†i kho·∫£n ${search} ƒë√£ ƒë∆∞·ª£c x√≥a.`);
        setAccountExists(false);
        setSuccessMessage("");
        setErrorMessage("");
        setSearch(""); // Reset √¥ t√¨m ki·∫øm
      } else {
        setDeleteMessage("L·ªói khi x√≥a t√†i kho·∫£n.");
      }
    } catch (error) {
      console.error("L·ªói khi x√≥a t√†i kho·∫£n:", error);
      setDeleteMessage("L·ªói khi x√≥a t√†i kho·∫£n.");
    }
  };

  // G·ªçi h√†m checkUserExistence m·ªói khi n·ªôi dung √¥ t√¨m ki·∫øm thay ƒë·ªïi
  useEffect(() => {
    const delayDebounceFn = setTimeout(() => {
      checkUserExistence();
    }, 500);

    return () => clearTimeout(delayDebounceFn);
  }, [search]);

  return (
    <div className="update-container">
      <h2>Qu·∫£n l√Ω t√†i kho·∫£n</h2>

      {/* √î t√¨m ki·∫øm */}
      <input
        type="text"
        placeholder="üîç T√¨m ki·∫øm t√†i kho·∫£n..."
        value={search}
        onChange={(e) => setSearch(e.target.value)}
        className="search-input"
      />

      {/* Th√¥ng b√°o k·∫øt qu·∫£ */}
      {search && (
        <p className="account-status">
          {accountExists ? "T√†i kho·∫£n t·ªìn t·∫°i." : "T√†i kho·∫£n kh√¥ng t·ªìn t·∫°i."}
        </p>
      )}

      {/* Th√¥ng b√°o th√†nh c√¥ng ho·∫∑c l·ªói */}
      {successMessage && <p className="success-message">{successMessage}</p>}
      {errorMessage && <p className="error-message">{errorMessage}</p>}
      {deleteMessage && <p className="delete-message">{deleteMessage}</p>}

      {/* Form ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u v√† x√≥a t√†i kho·∫£n */}
      {accountExists && (
        <div className="actions">
          <div className="update-form">
            <h3>ƒê·ªïi m·∫≠t kh·∫©u cho {search}</h3>
            <input
              type="password"
              placeholder="Nh·∫≠p m·∫≠t kh·∫©u m·ªõi"
              value={newPassword}
              onChange={(e) => setNewPassword(e.target.value)}
              className="password-input"
            />
            <button className="update-button" onClick={handleUpdatePassword}>
              C·∫≠p nh·∫≠t m·∫≠t kh·∫©u
            </button>
            <button className="delete-button" onClick={handleDeleteAccount}>
              X√≥a t√†i kho·∫£n
            </button>
          </div>
        </div>
      )}
    </div>
  );
};

export default UpdatePassword;
